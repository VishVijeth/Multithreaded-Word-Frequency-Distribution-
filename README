NAME: Aaron Parelius, NETID: ap1545, RUID:193001800, SECTION 08
NAME: Viswa Vijeth Ramesh, NETID: vr288, SECTION 01


HOW TO READ CREATE THE FILE AND RUN IT (just in case):
1. Go to the correct directory
2. Type "make" in order make all the files
3. Type "make clean" in order to clean up the .o files (Leaving you with just the executable "main")
4. Test using ./main (arguments)
5. Give us a good grade
  ^
 / \
/ | \
  |
  |
LOOK HERE!

Files to look at and what they do:
    linked_queue.c: the queue for the file and the directory threads
    WFD_rep.c: this is the linked list for the repository
    main.c: the main function where most of the work is actually done
    WFD_JSD.c: this deals with actually computing the JSD and words and such for the final solution.
    WFD_JSD.h, WFD_rep.h, linked_queue.h: should be self explanitory but I'll explain: they are the headers for some of the files above!


NOTES: IN CASE SOMETHING DOESNT WORK THE FUNCTION computeJSD in "WFD_rep.c" computes the correct solution 
when using a single thread. However, this really shoudlnt come up because everything have been tested and should work.
Also if theres a test case where theres somthing with a "." in the orginial arguments please note that it says
specially in the project write up that "skipping over the items that begin with a period is only for directories".

Answer to the question asked in the file: Exercise Why is it safe for the file queue to be bounded, but not the directory queue?

If directory queue were bounded, queue could fill up. If all the threads are currently reading directories, then they all block.
No thread will be available to dequeue causing a deadlock.

How we did the project:
1. Started writing the basic counting of words in file
2. Started working on JSD and finished that
3. Test 1&2
4. Worked on setting up the queues
5. Read 4-12 notes and see what has been done CHECKLIST:
    Read options (determine number of threads to create) DONE
    Create/initialize queues DONE
    Start requested number of file and directory threads DONE
    Add directories listed in arguments to directory queue DONE
    Add files listed in arguments to file queue DONE
6. Create and run file and directory threads and also put it into the REPSOSITROY DONE
7. Create 2Darray for repository for easy access and sorting(however this does increase the number of lookups total) DONE
8. Populate array with the indicies of the words and then send it off to the threads to do thier threading thing DONE
9. Print out array. DONE
10. DONE!!(this project was pretty long! apologies for the headers and all the different c files to look through in advance!)


Testing strategy: 
Step1: Check if code actually compiles/runs for whatever part we are doing
Step2: Check for memory leaks
Step3: Check if solution is correct for just a specific file
Step4: Make sure that every variable and function has the right type
Step5: Check if directory works where necessary
Step6: Work on the actual repository and organize them in the second phase
Step6: Check for dumb mistakes like a space or smthn where its not supposed to be

As for specifics as we wrote the code we wrote out possible issues that we could forsee in the future,
as well as issues that were mentioned on piazza and in the lecture notes.
We split the work into a few different parts for this project because there really was a lot of moving parts and was hard to deal with.
After finishing writing the code and heading to bugfixing we simply tested these cases.
Below is the list of the test cases we used:

Important test cases (I'm sure some of these overlap but I just wrote em as we coded):
1. Words have weird characters in them
2. Word have multiple of them
3. Check the frequency
4. Check JSD and the other function
5. Check for files and nonfiles
6. Make sure the queue is workign correctly
7. Make sure the directory queue is working correctly
8. Make sure that the WFD REPSOSITROY is working correctly.
9. Files + directories
10. Just files
11. Empty files
12. Empty directories
13. Test cases given
14. No space at the end
15. 1/0 item in repository
16. JSD between 1 word and 0 word txt
17. General JSD's of items
18. Large test cases w/ lots of folders and stuff
19. If it was ordered correctly
20. Check other random error cases